{"version":3,"sources":["Components/AddTask.js","Components/Task.js","Components/TaskList.js","Components/DoneTasks.js","App.js","index.js"],"names":["AddTask","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","actualDate","toConsumableArray","Date","toISOString","splice","join","actualTime","handleChange","data","as","setState","task_title","value","type","task_date","task_time","task_important","checked","clearInputs","prev","task_done","handleSubmit","event","preventDefault","state","task_id","id","addTask","window","alert","inherits","createClass","key","_this2","react_default","a","createElement","Grid","Row","Column","Header","Icon","name","Content","Form","FormField","htmlFor","TextArea","placeholder","onChange","e","width","Input","icon","min","Checkbox","label","Button","onClick","React","Component","Task","done","List","Item","size","verticalAlign","title","Description","dateDone","timeDone","important","style","color","date","time","markAsDone","deleteTask","TaskList","className","tasks","length","divided","relaxed","map","Components_Task","task","DoneTasks","countOptions","text","_useState","useState","_useState2","slicedToArray","count","setCount","columns","textAlign","marginRight","Select","options","parseInt","date_done","time_done","slice","reverse","App","prevState","concat","index","toLocaleTimeString","toLocaleDateString","newtasks","findIndex","clearTasks","localStorage","clear","getItem","JSON","parse","setItem","stringify","padded","celled","stackable","Components_AddTask","Components_TaskList","filter","DoneTasks_DoneTasks","ReactDOM","createRoot","document","getElementById","render","Fragment","src_App_0"],"mappings":"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","file":"static/js/main.12fd4cd0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Input,\r\n  Checkbox,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  FormField,\r\n  TextArea,\r\n} from \"semantic-ui-react\";\r\n\r\nclass AddTask extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.actualDate = [...new Date().toISOString()].splice(0, 10).join(\"\");\r\n    this.actualTime = [...new Date().toISOString()].splice(0, 10).join(\"\");\r\n\r\n    this.state = {\r\n      task_title: \"\",\r\n      task_date: this.actualDate,\r\n      task_time: \"-- --\",\r\n      task_important: false,\r\n      task_done: false,\r\n    };\r\n  }\r\n\r\n  actualDate = [...new Date().toISOString()].splice(0, 10).join(\"\");\r\n  actualTime = [...new Date().toISOString()].splice(0, 10).join(\"\");\r\n\r\n  handleChange = (data) => {\r\n    if (data.as === \"textarea\") {\r\n      this.setState({ task_title: data.value });\r\n    }\r\n\r\n    if (data.type === \"date\") {\r\n      this.setState({ task_date: data.value });\r\n    }\r\n\r\n    if (data.type === \"time\") {\r\n      this.setState({ task_time: data.value });\r\n    }\r\n\r\n    if (data.type === \"checkbox\") {\r\n      this.setState({ task_important: data.checked });\r\n    }\r\n  };\r\n\r\n  clearInputs = () => {\r\n    this.setState((prev) => ({\r\n      task_title: \"\",\r\n      task_date: this.actualDate,\r\n      task_time: \"-- --\",\r\n      task_important: false,\r\n      task_done: false,\r\n    }));\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.task_title !== \"\" && this.state.task_date) {\r\n      this.setState({ task_id: this.props.id });\r\n      this.props.addTask(this.state);\r\n      this.clearInputs();\r\n    } else {\r\n      window.alert(\"Jeśli masz coś do zrobienia wpisz zadanie do formularza\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Header as=\"h2\">\r\n              <Icon name=\"add\" />\r\n              <Header.Content>Dodaj zadanie</Header.Content>\r\n            </Header>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Form>\r\n              <FormField>\r\n                <label htmlFor=\"task-title\">Zadanie: </label>\r\n                <TextArea\r\n                  placeholder=\"Treść zadania\"\r\n                  value={this.state.task_title}\r\n                  onChange={(e, data) => this.handleChange(data)}\r\n                ></TextArea>\r\n              </FormField>\r\n\r\n              <FormField width={7}>\r\n                <label htmlFor=\"task-date\">Wykonaj do dnia: </label>\r\n                <Input\r\n                  type=\"date\"\r\n                  icon=\"calendar alternate outline\"\r\n                  min={this.actualDate}\r\n                  value={this.state.task_date}\r\n                  onChange={(e, data) => this.handleChange(data)}\r\n                ></Input>\r\n              </FormField>\r\n\r\n              <FormField width={5}>\r\n                <label>Do Godziny:</label>\r\n                <Input\r\n                  icon=\"time\"\r\n                  type=\"time\"\r\n                  onChange={(e, data) => this.handleChange(data)}\r\n                ></Input>\r\n              </FormField>\r\n\r\n              <FormField>\r\n                <Checkbox\r\n                  label=\"wyróżnij jako ważne\"\r\n                  checked={this.state.task_important}\r\n                  onChange={(e, data) => this.handleChange(data)}\r\n                />\r\n              </FormField>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                value=\"Dodaj zadanie\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                Dodaj zadanie\r\n              </Button>\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\nimport { Button, List } from \"semantic-ui-react\";\r\n\r\nconst Task = (props) => {\r\n  if (!props.done) {\r\n    return (\r\n      <List.Item>\r\n        <List.Icon name=\"x\" size=\"large\" verticalAlign=\"middle\" />\r\n        <List.Content>\r\n          <List.Header>\r\n            {props.important ? (\r\n              <span style={{ color: \"red\" }}>{props.title}</span>\r\n            ) : (\r\n              props.title\r\n            )}\r\n          </List.Header>\r\n          <List.Description>\r\n            wykonaj do {props.date} godz. {props.time}\r\n          </List.Description>\r\n        </List.Content>\r\n        <List.Content>\r\n          <Button\r\n            onClick={() => {\r\n              props.markAsDone(props.id);\r\n            }}\r\n          >\r\n            oznacz jako wykonane\r\n          </Button>\r\n          <Button onClick={() => props.deleteTask(props.id)}>\r\n            usuń zadanie\r\n          </Button>\r\n        </List.Content>\r\n      </List.Item>\r\n    );\r\n  } else {\r\n    return (\r\n      <List.Item>\r\n        <List.Icon name=\"check\" size=\"large\" verticalAlign=\"middle\" />\r\n        <List.Content>\r\n          <List.Header>{props.title}</List.Header>\r\n          <List.Description>\r\n            wykonano dnia {props.dateDone} o godzinie {props.timeDone}\r\n          </List.Description>\r\n        </List.Content>\r\n      </List.Item>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport { List, Header, Icon } from \"semantic-ui-react\";\r\n\r\nconst TaskList = (props) => {\r\n  const task = (e) => (\r\n    <Task\r\n      id={e.task_id}\r\n      title={e.task_title}\r\n      date={e.task_date}\r\n      time={e.task_time}\r\n      important={e.task_important}\r\n      key={e.task_id}\r\n      markAsDone={props.markAsDone}\r\n      deleteTask={props.deleteTask}\r\n      done={e.task_done}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"tasks-to-do\">\r\n      <Header as=\"h2\">\r\n        <Icon name=\"coffee\" />\r\n        <Header.Content>Zadania do zrobienia</Header.Content>\r\n      </Header>\r\n      {props.tasks.length ? (\r\n        <List divided relaxed>\r\n          {props.tasks.map((e) => task(e))}\r\n        </List>\r\n      ) : (\r\n        <span>Brak zadań do zrobienia</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport Task from \"./Task\";\r\nimport { List, Select, Grid, Header, Icon } from \"semantic-ui-react\";\r\n\r\nexport const DoneTasks = (props) => {\r\n  const task = (e) => (\r\n    <Task\r\n      id={e.task_id}\r\n      key={e.task_id}\r\n      title={e.task_title}\r\n      dateDone={e.date_done}\r\n      timeDone={e.time_done}\r\n      done={e.task_done}\r\n    />\r\n  );\r\n\r\n  const countOptions = [\r\n    { key: \"1\", value: \"1\", text: \"1\" },\r\n    { key: \"5\", value: \"5\", text: \"5\" },\r\n    { key: \"10\", value: \"10\", text: \"10\" },\r\n    { key: \"all\", value: props.tasks.length, text: \"All\" },\r\n  ];\r\n\r\n  const [count, setCount] = useState(5);\r\n\r\n  return (\r\n    <div className=\"tasks-done\">\r\n      <Header as=\"h2\">\r\n        <Icon name=\"bed\" />\r\n        <Header.Content>Zadania zrobione</Header.Content>\r\n      </Header>\r\n      <Grid relaxed>\r\n        <Grid.Row columns={1} verticalAlign=\"middle\" textAlign=\"left\">\r\n          <Grid.Column>\r\n            <span style={{ marginRight: \"25px\" }}>\r\n              Liczba wyświetlanych zrobionych zadań\r\n            </span>\r\n\r\n            <Select\r\n              options={countOptions}\r\n              placeholder=\"Wybierz...\"\r\n              onChange={(e, data) => setCount(parseInt(data.value))}\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      {props.tasks.length ? (\r\n        <List divided relaxed>\r\n          {props.tasks\r\n            .map((e) => task(e))\r\n            .slice(-count)\r\n            .reverse()}\r\n        </List>\r\n      ) : (\r\n        <span>Brak zrobionych zadań</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport AddTask from \"./Components/AddTask\";\nimport TaskList from \"./Components/TaskList\";\nimport { DoneTasks } from \"./Components/DoneTasks\";\nimport React from \"react\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = window.localStorage.getItem(\"tasks\")\n      ? {\n          tasks: JSON.parse(window.localStorage.getItem(\"tasks\")),\n        }\n      : { tasks: [] };\n  }\n\n  componentDidUpdate() {\n    window.localStorage.setItem(\"tasks\", JSON.stringify([...this.state.tasks]));\n  }\n\n  addTask = (task) => {\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task].map((e, index) => {\n        e[\"task_id\"] = index;\n        return e;\n      }),\n    }));\n  };\n\n  markAsDone = (id) => {\n    this.setState((prev) => ({\n      tasks: prev.tasks.map((e) => {\n        if (e.task_id === id) {\n          e.task_done = true;\n          e[\"time_done\"] = new Date().toLocaleTimeString();\n          e[\"date_done\"] = new Date().toLocaleDateString();\n        }\n        return e;\n      }),\n    }));\n  };\n\n  deleteTask = (id) => {\n    const newtasks = [...this.state.tasks];\n    newtasks.splice(\n      newtasks.findIndex((e) => e.task_id === id),\n      1\n    );\n\n    this.setState({\n      tasks: newtasks,\n    });\n  };\n\n  clearTasks = () => {\n    this.setState({ tasks: [] });\n    window.localStorage.clear();\n  };\n\n  render() {\n    return (\n      <Grid padded celled stackable>\n        <Grid.Row color=\"violet\">\n          <Grid.Column>\n            <header>\n              <h1>Zadania do zrobienia</h1>\n            </header>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row columns={2}>\n          <Grid.Column width={6}>\n            <Grid celled>\n              <AddTask addTask={this.addTask} id={this.state.tasks.length} />\n            </Grid>\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Grid celled>\n              <Grid.Row>\n                <Grid.Column>\n                  {\" \"}\n                  <TaskList\n                    tasks={this.state.tasks.filter((e) => !e.task_done)}\n                    markAsDone={this.markAsDone}\n                    deleteTask={this.deleteTask}\n                  />\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n            <Grid celled>\n              <Grid.Row>\n                <Grid.Column>\n                  <DoneTasks\n                    tasks={this.state.tasks.filter((e) => e.task_done)}\n                  ></DoneTasks>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row padded>\n          <Grid.Column color=\"black\" padded>\n            <Button onClick={this.clearTasks}>Wyczyść wszystko</Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>\n);\n"],"sourceRoot":""}